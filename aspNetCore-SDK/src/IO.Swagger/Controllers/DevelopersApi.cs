/*
 * Accounts API
 *
 * Accounts API
 *
 * OpenAPI spec version: 1.0.4
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    { 
        /// <summary>
        /// searches accounts
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available accounts in the system </remarks>
        /// <param name="numberId">pass an optional search string for looking up accounts</param>
        /// <param name="numberId2">pass an optional search string for looking up accounts</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="201">searcsdfsdfsdfh results matfsddsfching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/MConneely/AccountsAPI/1.0.4/accounts")]
        [ValidateModelState]
        [SwaggerOperation("Searchaccounts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountsItem>), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "searcsdfsdfsdfh results matfsddsfching criteria")]
        public virtual IActionResult Searchaccounts([FromQuery]int? numberId, [FromQuery]int? numberId2, [FromQuery]int? skip, [FromQuery][Range(0, 50)]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountsItem>));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<AccountsItem>>(exampleJson)
            : default(List<AccountsItem>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
